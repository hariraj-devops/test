/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/scripts": {
    get: {
      parameters: {
        query?: {
          maxResults?: number;
          orderBy?: "modifiedAt" | "-modifiedAt";
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["Script"][];
              total: number;
            };
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewScript"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "application/json": components["schemas"]["Script"];
          };
        };
      };
    };
  };
  "/scripts/{id}": {
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description null */
        204: {
          content: never;
        };
      };
    };
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PartialScript"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "application/json": components["schemas"]["Script"];
          };
        };
      };
    };
  };
  "/scripts/{id}/update_context": {
    put: {
      parameters: {
        path: {
          /** @description Script ID */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "application/json": components["schemas"]["Script"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description Script ID */
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Script: {
      content: string;
      context: string[];
      createdAt: number;
      createdBy: external["user.yaml"]["components"]["schemas"]["User"];
      description: string;
      /** Format: uuid */
      id: string;
      jobIds: string[];
      jobResultUrls: string[];
      modifiedAt: number;
      modifiedBy: external["user.yaml"]["components"]["schemas"]["User"];
      name: string;
      referencesList: components["schemas"]["SourceVersionReference"][];
    };
    SourceVersionReference: {
      sourceName: string;
      reference: {
        type: "BRANCH" | "TAG" | "COMMIT";
        value: string;
      };
    };
    NewScript: {
      content: string;
      context: string[];
      description: string;
      jobIds?: string[];
      name: string;
      referencesList?: components["schemas"]["SourceVersionReference"][];
    };
    PartialScript: {
      /** @description The content of the script. */
      content?: string;
      /** @description The selected context. Unspecified context i.e. empty list means "None selected". */
      context?: string[];
      /** @description The name of the script. */
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "user.yaml": {
    paths: {
      "/user": {
        get: {
          responses: {
            /** @description null */
            200: {
              content: {
                "application/json": {
                  data: external["user.yaml"]["components"]["schemas"]["User"][];
                  itemsPerPage: number;
                  startIndex: number;
                  totalResults: number;
                };
              };
            };
          };
        };
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: {
        User: {
          active: boolean;
          /** Format: email */
          email: string;
          firstName: string;
          /** Format: uuid */
          id: string;
          lastName: string;
          name: string;
          tag: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
}

export type operations = Record<string, never>;
