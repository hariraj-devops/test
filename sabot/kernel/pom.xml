<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2017-2019 Dremio Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.dremio.sabot</groupId>
    <artifactId>dremio-sabot-parent</artifactId>
    <version>${revision}</version>
  </parent>
  <artifactId>dremio-sabot-kernel</artifactId>
  <name>Sabot - Kernel</name>
  <dependencies>
    <dependency>
      <groupId>com.dremio</groupId>
      <artifactId>dremio-common</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-options</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>com.dremio</groupId>
      <artifactId>dremio-connector</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.lz4</groupId>
      <artifactId>lz4-java</artifactId>
      <version>1.7.1</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.client</groupId>
      <artifactId>dremio-client-base</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-base-rpc</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-executorservice</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-maestro-client</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-jobresults-client</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-nessie-metadata-cache</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-jobresults-common</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-memory-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-memory-netty</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.datasketches</groupId>
      <artifactId>datasketches-java</artifactId>
      <version>2.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.datasketches</groupId>
      <artifactId>datasketches-memory</artifactId>
      <version>1.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
    </dependency>
    <dependency>
      <groupId>com.hubspot.jackson</groupId>
      <artifactId>jackson-datatype-protobuf</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-guava</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-coordinator</artifactId>
    </dependency>

    <dependency>
      <groupId>io.opentelemetry.instrumentation</groupId>
      <artifactId>opentelemetry-instrumentation-annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-telemetry-api</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-telemetry-impl</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-namespace</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-namespace</artifactId>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-scheduler</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-fabric-rpc</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-users</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-embedded-metadata-pointer</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-nessie-grpc-client</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-nessie-validation</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectnessie.nessie</groupId>
      <artifactId>nessie-client</artifactId>
    </dependency>

    <dependency>
      <groupId>com.koloboke</groupId>
      <artifactId>koloboke-impl-common-jdk8</artifactId>
      <version>1.0.0</version>
    </dependency>

    <dependency>
      <groupId>io.protostuff</groupId>
      <artifactId>protostuff-core</artifactId>
    </dependency>

    <dependency>
      <groupId>io.protostuff</groupId>
      <artifactId>protostuff-collectionschema</artifactId>
    </dependency>

    <dependency>
      <groupId>io.protostuff</groupId>
      <artifactId>protostuff-runtime</artifactId>
    </dependency>

    <dependency>
      <groupId>io.protostuff</groupId>
      <artifactId>protostuff-api</artifactId>
    </dependency>

    <dependency>
      <groupId>de.vandermeer</groupId>
      <artifactId>asciitable</artifactId>
      <version>0.2.5</version>
    </dependency>

    <dependency>
      <groupId>com.dremio.data</groupId>
      <artifactId>dremio-tpch-sample-data</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-vector</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-parquet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-data</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.apache.orc</groupId>
          <artifactId>orc-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-aws</artifactId>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>glue</artifactId>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>secretsmanager</artifactId>
    </dependency>

    <dependency>
      <groupId>com.univocity</groupId>
      <artifactId>univocity-parsers</artifactId>
      <version>1.3.0</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.thoughtworks.paranamer</groupId>
      <artifactId>paranamer</artifactId>
      <version>2.5.6</version>
      <exclusions>
        <!-- Exclude Paranamer's dependency on mockito-all, which has a Jar
             file that contains old Hamcrest 1.1 classes (rather than declaring
             a dependency on Hamcrest).  (See DRILL-2130.) -->
        <exclusion>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-all</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
    </dependency>
    <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
    </dependency>
    <dependency>
      <!-- Remove this dependency when xalan is upgraded (serializer will become a transitive dependency) -->
      <groupId>xalan</groupId>
      <artifactId>serializer</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.codemodel</groupId>
      <artifactId>codemodel</artifactId>
      <version>2.6</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.containers</groupId>
      <artifactId>jersey-container-jetty-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-multipart</artifactId>
    </dependency>
    <dependency>
      <groupId>com.esotericsoftware</groupId>
      <artifactId>kryo</artifactId>
      <version>4.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.objenesis</groupId>
      <artifactId>objenesis</artifactId>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-afterburner</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-mvc-freemarker</artifactId>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.calcite</groupId>
      <artifactId>calcite-core</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.codehaus.janino</groupId>
          <artifactId>janino</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.janino</groupId>
          <artifactId>commons-compiler</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.calcite.avatica</groupId>
      <artifactId>avatica-core</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
    </dependency>
    <dependency>
      <groupId>net.hydromatic</groupId>
      <artifactId>foodmart-data-json</artifactId>
      <version>0.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-column</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-hadoop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-encoding</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-generator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-arrow</artifactId>
    </dependency>
    <dependency>
      <groupId>it.unimi.dsi</groupId>
      <artifactId>fastutil-core</artifactId>
      <version>8.5.13</version>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentracing</groupId>
      <artifactId>opentracing-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentracing</groupId>
      <artifactId>opentracing-util</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentracing</groupId>
      <artifactId>opentracing-noop</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentracing</groupId>
      <artifactId>opentracing-mock</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>1</version>
    </dependency>
    <dependency>
      <groupId>com.dremio</groupId>
      <artifactId>dremio-protocol</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.sabot</groupId>
      <artifactId>dremio-sabot-logical</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.sabot</groupId>
      <artifactId>dremio-sabot-grammar</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.dremio</groupId>
      <artifactId>dremio-common</artifactId>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.dremio</groupId>
      <artifactId>dremio-connector</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-spill</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.slugify</groupId>
      <artifactId>slugify</artifactId>
    </dependency>
    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
    </dependency>
    <dependency>
      <groupId>com.carrotsearch</groupId>
      <artifactId>hppc</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>commons-compiler</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-yarn-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-client</artifactId>
      <exclusions>
        <exclusion>
          <groupId>io.netty</groupId>
          <artifactId>netty-all</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-hdfs</artifactId>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-hdfs</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>4.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi-ooxml</artifactId>
      <version>4.1.2</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-resourcescheduler</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.arrow.gandiva</groupId>
      <artifactId>arrow-gandiva</artifactId>
      <version>${arrow.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-commandpool</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-execselector</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-jobtelemetry-common</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-jobtelemetry-server</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-jobtelemetry-client</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-catalog-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-credentials</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectnessie.nessie</groupId>
      <artifactId>nessie-compatibility-common</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectnessie.nessie</groupId>
      <artifactId>nessie-client-testextension</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.tdunning</groupId>
      <artifactId>t-digest</artifactId>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-accelerator-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-datastore</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-orphanage</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-credential-provider</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/io.delta/delta-standalone -->
    <dependency>
      <groupId>io.delta</groupId>
      <artifactId>delta-standalone_2.12</artifactId>
      <version>3.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-transientstore</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-partition-stats</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-distributed-plan-cache</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-services-catalog</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dremio.common</groupId>
      <artifactId>dremio-common-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.dremio.services</groupId>
      <artifactId>dremio-optimization-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>5.5.2</version>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <filtering>false</filtering>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>${project.basedir}/src/test/resources</directory>
      </testResource>
      <testResource>
        <filtering>true</filtering>
        <directory>${project.basedir}/src/test/resources-nessie</directory>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <configuration>
          <licenseSets>
            <licenseSet>
              <validHeaders combine.children="append">
                <validHeader>src/main/licenses/com.dremio.exec.expr.fn.impl.GuavaUtf8.license.txt</validHeader>
              </validHeaders>
              <excludes combine.children="append">
                <!-- TODO: add headers to SQL files without breaking tests -->
                <excludes>**/*.sql</excludes>
                <excludes>**/*.dremarrow1</excludes>
                <excludes>**/*.kryo</excludes>
                <excludes>**/*.psva</excludes>
                <excludes>**/*.ssv</excludes>
                <excludes>**/*.tbla</excludes>
                <excludes>**/*.csvh-test</excludes>
                <excludes>**/*.dat</excludes>
                <excludes>**/src/test/resources/assignments/**</excludes>
                <excludes>**/src/test/resources/deltalake/**</excludes>
                <excludes>**/src/test/resources/iceberg/**</excludes>
                <excludes>**/src/test/resources/parquet/**</excludes>
                <excludes>**/src/test/resources/metadatarefresh/withHiddenFiles/**</excludes>
                <excludes>**/src/test/resources/metadatarefresh/maxLeafCols/**</excludes>
                <excludes>**/src/test/resources/store/text/FolderWithoutExtension/**</excludes>
                <excludes>**/src/test/resources/store/text/testWithoutExtension</excludes>
              </excludes>
            </licenseSet>
          </licenseSets>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.dremio.build-tools</groupId>
        <artifactId>dremio-protostuff-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-sources</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <protoModules>
                <protoModule>
                  <source>src/main/protobuf/attempts.proto</source>
                  <outputDir>${project.build.directory}/generated-sources/protostuff</outputDir>
                  <output>com/dremio/protostuff/compiler/dremio_java_bean.java.stg</output>
                  <options>
                    <property>
                      <name>generate_field_map</name>
                      <value>true</value>
                    </property>
                    <property>
                      <name>builder_pattern</name>
                      <value>true</value>
                    </property>
                  </options>
                </protoModule>
                <protoModule>
                  <source>src/main/protobuf/updateid.proto</source>
                  <outputDir>${project.build.directory}/generated-sources/protostuff</outputDir>
                  <output>com/dremio/protostuff/compiler/dremio_java_bean.java.stg</output>
                  <options>
                    <property>
                      <name>generate_field_map</name>
                      <value>true</value>
                    </property>
                    <property>
                      <name>builder_pattern</name>
                      <value>true</value>
                    </property>
                  </options>
                </protoModule>
                <protoModule>
                  <source>src/main/protobuf/query-reflection.proto</source>
                  <outputDir>${project.build.directory}/generated-sources/protostuff</outputDir>
                  <output>com/dremio/protostuff/compiler/dremio_java_bean.java.stg</output>
                  <options>
                    <property>
                      <name>generate_field_map</name>
                      <value>true</value>
                    </property>
                    <property>
                      <name>builder_pattern</name>
                      <value>true</value>
                    </property>
                  </options>
                </protoModule>
              </protoModules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-protobuf</id>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <protoSourceRoot>${project.basedir}/src/main/protobuf</protoSourceRoot>
              <pluginId>grpc-java</pluginId>
              <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
              <excludes>
                <exclude>**/updateid.proto</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <protoSourceRoot>${basedir}/src/main/protobuf</protoSourceRoot>
              <excludes>
                <exclude>**/updateid.proto</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <!-- Extract javacc parser grammar template from sabot-grammar -->
          <execution>
            <id>unpack-javacc-grammar</id>
            <goals>
              <goal>unpack</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>com.dremio.sabot</groupId>
                  <artifactId>dremio-sabot-grammar</artifactId>
                  <version>${project.version}</version>
                  <type>jar</type>
                  <overWrite>overWriteIfNewer</overWrite>
                  <outputDirectory>${project.build.directory}/grammar</outputDirectory>
                  <includes>javacc/*</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <!-- Extract ValueVectorTypes.tdd from arrow-vector.jar and put
          it under ${project.build.directory}/codegen/data where all freemarker data files are. -->
          <execution>
            <id>unpack-vector-types</id>
            <goals>
              <goal>unpack</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.apache.arrow</groupId>
                  <artifactId>arrow-vector</artifactId>
                  <type>jar</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${project.build.directory}/</outputDirectory>
                  <includes>codegen/data/ValueVectorTypes.tdd</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <configLocation>src/main/checkstyle/sabot-checkstyle-config.xml</configLocation>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-fmpp-pre</id>
            <goals>
              <goal>set-system-properties</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <properties>
                <property>
                  <name>maven.project.version</name>
                  <value>${project.version}</value>
                </property>
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- generate sources from fmpp -->
        <groupId>com.dremio.build-tools</groupId>
        <artifactId>dremio-fmpp-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-fmpp</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <config>${project.build.directory}/codegen/config.fmpp</config>
              <output>${project.build.directory}/generated-sources/fmpp</output>
              <templates>${project.build.directory}/codegen/templates</templates>
              <data>tdd(${project.basedir}/src/main/codegen/config.fmpp)</data>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- generate the parser (Parser.jj is itself generated in sabot-grammar
                    and copied here in initialize phase) -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>javacc-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>javacc</id>
            <goals>
              <goal>javacc</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <sourceDirectory>${project.build.directory}/grammar/javacc</sourceDirectory>
              <includes>
                <include>**/*.jj</include>
              </includes>
              <lookAhead>2</lookAhead>
              <isStatic>false</isStatic>
              <outputDirectory>${project.build.directory}/generated-sources/javacc</outputDirectory>
              <!--
              <debugParser>true</debugParser>
              <debugLookAhead>true</debugLookAhead>
              <debugTokenManager>true</debugTokenManager>
 -->
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- source file must end up in the jar for janino parsing -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/test/resources/</directory>
                  <includes>
                    <include>multilevel/**</include>
                    <include>parquet/**</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
              <outputDirectory>${project.build.directory}/src-resources</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <!-- copy all templates/data in the same location to compile them at once -->
            <id>copy-fmpp-resources</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/codegen</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/codegen</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-sources-as-resources</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>process-sources</phase>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/java</directory>
                  <includes>
                    <include>com/dremio/exec/expr/fn/**/*Function.java</include>
                    <include>com/dremio/exec/expr/fn/**/*Functions.java</include>
                    <include>com/dremio/exec/expr/fn/impl/**/*.java</include>
                    <include>com/dremio/exec/store/NewValueFunction.java</include>
                  </includes>
                </resource>
                <resource>
                  <directory>${project.build.directory}/generated-sources/fmpp</directory>
                  <includes>
                    <include>com/dremio/exec/expr/fn/impl/**/*.java</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-test-sources-as-resources</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>process-test-sources</phase>
            <configuration>
              <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/test/java</directory>
                  <includes>
                    <include>com/dremio/exec/fn/impl/testing/GeneratorFunctions.java</include>
                    <include>com/dremio/exec/testing/TestResourceLeak.java</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>com.dremio</groupId>
            <artifactId>dremio-common</artifactId>
            <version>${project.version}</version>
            <classifier>tests</classifier>
            <type>test-jar</type>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>classpath-scanning</id>
            <goals>
              <goal>java</goal>
            </goals>
            <phase>${buildtimescan.phase}</phase>
            <configuration>
              <mainClass>com.dremio.common.scanner.BuildTimeScan</mainClass>
              <includePluginDependencies>true</includePluginDependencies>
              <arguments>
                <argument>${project.build.outputDirectory}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>reserved-SQL-keyword-list-generation</id>
            <goals>
              <goal>java</goal>
            </goals>
            <!-- We need the generator class, that's why this is executed after compile phase -->
            <phase>process-classes</phase>
            <configuration>
              <mainClass>com.dremio.exec.planner.sql.parser.SqlReservedKeywordGenerator</mainClass>
              <arguments>
                <argument>${project.build.outputDirectory}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <executions>
          <execution>
            <!-- we override the default test execution to exclude tests
              that would take unusually long time to run (> 1 minute) and run such tests
              in a different profile -->
            <id>default-test</id>
            <goals>
              <goal>test</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <excludes>
                <exclude>**/TestLargeFileCompilation.java</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <!-- The value is provided by nessie-runner-maven-plugin -->
            <nessie.server.url>${nessie.server.url}</nessie.server.url>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.projectnessie.nessie-runner</groupId>
        <artifactId>nessie-runner-maven-plugin</artifactId>
        <configuration>
          <skip>${skipTests}</skip>
          <appArtifactId>org.projectnessie.nessie:nessie-quarkus:jar:runner:${nessie.version}</appArtifactId>
          <javaVersion>21</javaVersion>
          <systemProperties>
            <nessie.version.store.type>IN_MEMORY</nessie.version.store.type>
            <nessie.version.store.persist.cache-capacity-mb>1</nessie.version.store.persist.cache-capacity-mb>
          </systemProperties>
          <environment>
            <!-- Jenkins sets OTEL_TRACES_EXPORTER and other OTEL config variables to monitor builds. However,
            those settins break recent Nessie servers, which must be configured in a Quarkus-specific way.
            Therefore, we override this main config variable here to un-enable tracing in Nessie during tests. -->
            <OTEL_TRACES_EXPORTER>none</OTEL_TRACES_EXPORTER>
          </environment>
          <httpListenPortProperty>nessie.server.http.port</httpListenPortProperty>
          <httpListenUrlProperty>nessie.server.url</httpListenUrlProperty>
        </configuration>
        <executions>
          <execution>
            <id>start</id>
            <goals>
              <goal>start</goal>
            </goals>
            <phase>pre-integration-test</phase>
          </execution>
          <execution>
            <id>stop</id>
            <goals>
              <goal>stop</goal>
            </goals>
            <phase>post-integration-test</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>jar-resources</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <classesDirectory>${project.build.directory}/src-resources</classesDirectory>
              <skipIfEmpty>true</skipIfEmpty>
              <classifier>resources</classifier>
            </configuration>
          </execution>
          <execution>
            <id>proto-jar-resources</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <classesDirectory>${project.basedir}/src/main/protobuf</classesDirectory>
              <classifier>proto</classifier>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
