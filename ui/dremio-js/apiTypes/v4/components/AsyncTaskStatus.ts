/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AsyncTaskStatus: components["schemas"]["QueuedStatus"] | components["schemas"]["RunningStatus"] | components["schemas"]["FailedStatus"] | components["schemas"]["CompletedStatus"];
    PercentageProgress: {
      /** @constant */
      type: "percentage";
      current: number;
      total: number;
    };
    SteppedProgress: {
      /** @constant */
      type: "stepped";
      currentStep: number;
      steps: {
          title: string;
          progress?: components["schemas"]["PercentageProgress"];
        }[];
    };
    TaskProgress: components["schemas"]["PercentageProgress"] | components["schemas"]["SteppedProgress"];
    QueuedStatus: {
      /** Format: date-time */
      queuedAt?: string;
      /** @constant */
      status: "QUEUED";
    };
    RunningStatus: {
      progress?: components["schemas"]["TaskProgress"];
      queuedAt?: components["schemas"]["QueuedStatus"]["queuedAt"];
      runningDurationMs?: number;
      /** Format: date-time */
      startedAt?: string;
      /** @constant */
      status: "RUNNING";
    };
    CompletedStatus: {
      /** Format: date-time */
      finishedAt?: string;
      queuedAt?: components["schemas"]["QueuedStatus"]["queuedAt"];
      runningDurationMs?: components["schemas"]["RunningStatus"]["runningDurationMs"];
      startedAt?: components["schemas"]["RunningStatus"]["startedAt"];
      /** @constant */
      status: "COMPLETED";
    };
    FailedStatus: {
      errors: external["Problem.yaml"]["components"]["schemas"]["Problem"][];
      queuedAt?: components["schemas"]["QueuedStatus"]["queuedAt"];
      runningDurationMs?: components["schemas"]["RunningStatus"]["runningDurationMs"];
      startedAt?: components["schemas"]["RunningStatus"]["startedAt"];
      /** @constant */
      status: "FAILED";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "Problem.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        /** @description An RFC 9457 problem object */
        Problem: {
          /**
           * Format: uri-reference
           * @description A URI reference that identifies the problem type
           */
          type: string;
          /** @description The HTTP status code generated by the origin server for this occurrence of the problem */
          status?: number;
          /** @description A human-readable summary of the problem type */
          title?: string;
          /** @description An optional extension containing non-standard meta-information for the given error type */
          meta?: {
            additionalDetails?: external["Problem.yaml"]["components"]["schemas"]["AdditionalDetails"][];
          };
        };
        ValidationProblem: {
          /** @constant */
          type: "https://api.dremio.dev/problems/validation-problem";
          /** @constant */
          title?: "There was a problem validating the content of the request";
          /** @constant */
          status?: 422;
          /** @description An extension containing multiple validation or request errors */
          errors: {
              type: external["Problem.yaml"]["components"]["schemas"]["Problem"]["type"];
              /**
               * Format: relative-json-pointer
               * @description A JSON pointer to locate the problem within the request's content
               */
              pointer: string;
              detail?: string;
            }[];
        };
        /** @description Additional information not controlled by Dremio that could be relevant to the API consumer / UI user */
        AdditionalDetails: {
          contents: string;
          subject: string;
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
}

export type operations = Record<string, never>;
