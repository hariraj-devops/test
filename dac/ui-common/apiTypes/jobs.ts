/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/jobs-listing/v1.0": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": {
              jobs: components["schemas"]["JobListing"][];
              next: string;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Dataset: {
      datasetName: string;
      datasetPath: string;
      datasetPathsList: unknown[];
      datasetType: string;
      versionContext: string;
    };
    JobDurationDetails: ({
        phaseDuration: string;
        phaseName: "EXECUTION_PLANNING" | "METADATA_RETRIEVAL" | "PENDING" | "PLANNING" | "QUEUED" | "RUNNING" | "STARTING";
        phaseStartTime: string;
      })[];
    JobStatus: "NOT_SUBMITTED" | "STARTING" | "RUNNING" | "COMPLETED" | "CANCELED" | "FAILED" | "CANCELLATION_REQUESTED" | "ENQUEUED" | "PLANNING" | "PENDING" | "METADATA_RETRIEVAL" | "QUEUED" | "ENGINE_START" | "EXECUTION_PLANNING" | "INVALID_STATE";
    JobListing: {
      accelerated: boolean;
      datasetVersion: string;
      description: string;
      duration: number;
      durationDetails: components["schemas"]["JobDurationDetails"][];
      endTime: number;
      enqueuedTime: number;
      /** Format: uuid */
      id: string;
      input: string;
      isComplete: boolean;
      output: string;
      outputLimited: boolean;
      outputRecords: number;
      plannerEstimatedCost: number;
      queriedDatasets?: external["jobs.yaml"][];
      queryText: string;
      queryType: string;
      requestType: string;
      rowsScanned: number;
      spilled: boolean;
      starFlakeAccelerated: boolean;
      startTime: number;
      jobStatus: components["schemas"]["JobStatus"];
      totalAttempts: number;
      user: string;
      waitInClient: number;
      wlmQueue: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "jobs.yaml": {
    /** Jobs */
    info: unknown;
    components: unknown;
    paths: unknown;
  };
}

export type operations = Record<string, never>;
