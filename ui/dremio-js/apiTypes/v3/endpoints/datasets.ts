/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/dataset/{dataset_id}/reflection/recommendation": {
    /**
     * Generate reflection suggestion(s) for a given dataset
     * @description This endpoint generates reflection suggestion(s) based on the cardinality of a dataset.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description UUID of the dataset to generate reflection suggestion(s) for
           * @example 2d025d52-f2a7-46d1-8c86-aa932dd5ac91
           */
          dataset_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @description List of reflection suggestions. */
              data?: components["schemas"]["Entity"][];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Not found when the dataset with provided UUID is missing */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/dataset/{dataset_id}/reflection/recommendation/{type}": {
    /**
     * Generate reflection suggestion(s) of certain type(s) for a given dataset
     * @description This endpoint generates reflection suggestion(s) of certain type(s) based on the
     * cardinality of a dataset.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description UUID of the dataset to generate reflection suggestion(s) for
           * @example 2d025d52-f2a7-46d1-8c86-aa932dd5ac91
           */
          dataset_id: string;
          /**
           * @description Type of reflection (RAW, AGG, ALL)
           * @example RAW
           */
          type: "RAW" | "raw" | "AGG" | "agg" | "ALL" | "all";
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @description List of reflection suggestions. */
              data?: components["schemas"]["Entity"][];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Not found when the dataset with provided UUID is missing */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Entity: {
      /**
       * @description Type of reflection.
       * @enum {string}
       */
      type?: "RAW" | "AGGREGATION";
      /** @description If the reflection should be available for accelerating queries, set to true. Otherwise, set to false. */
      enabled?: boolean;
      /** @description List of suggested display fields (for RAW reflections). */
      displayFields?: {
          /** @description Field name */
          name?: string;
        }[];
      /** @description List of suggested dimension fields (for AGG reflections). */
      dimensionFields?: {
          /** @description Field name */
          name?: string;
          /** @description Granularity of the dimension field (e.g., DATE). */
          granularity?: string;
        }[];
      /** @description List of suggested measure fields (for AGGREGATION reflections). */
      measureFields?: {
          name?: string;
          /** @description List of suggested measure types (e.g., COUNT, SUM). */
          measureTypeList?: string[];
        }[];
      /** @description List of suggested partition fields. */
      partitionFields?: {
          name?: string;
        }[];
      /** @description Entity type (reflection). */
      entityType?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
