/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/scripts": {
    get: {
      parameters: {
        query?: {
          offset?: number;
          maxResults?: number;
          /** @description search scripts with matched name. */
          search?: string;
          /** @description Order matched scripts by the orderBy string. The string is a comma separated combination of terms 'name', 'createdAt' and 'modifiedAt'. The result is ordered by the terms in ascending order. Each term can have a prefixed hyphen, which means the result is in descending order. */
          orderBy?: string;
          /** @description search scripts with matched creator. */
          createdBy?: string;
        };
      };
      responses: {
        /** @description Get a list of requested scripts. */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["ReturnedScriptEntity"][];
              total: number;
            };
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewScriptEntity"];
        };
      };
      responses: {
        /** @description Successfully created the script. */
        200: {
          content: {
            "application/json": components["schemas"]["ReturnedScriptEntity"];
          };
        };
        /** @description Bad Request. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/scripts/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the script with the specified id. */
        200: {
          content: {
            "application/json": components["schemas"]["ReturnedScriptEntity"];
          };
        };
        /** @description Unauthorized. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        404: components["responses"]["NotFoundError"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Successfully deleted the script with the specified id. */
        204: {
          content: never;
        };
        /** @description Unauthorized. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        404: components["responses"]["NotFoundError"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      /** @description Script's id, createdAt, createdBy, modifiedAt and modifiedBy can't be updated. They would be ignored if specified in the request. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PartialScript"];
        };
      };
      responses: {
        /** @description Successfully updated the script with the specified id. */
        200: {
          content: {
            "application/json": components["schemas"]["ReturnedScriptEntity"];
          };
        };
        /** @description Bad Request. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        404: components["responses"]["NotFoundError"];
      };
    };
  };
  "/scripts:batchDelete": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            ids?: string[];
          };
        };
      };
      responses: {
        /** @description The operation has completed. Check errors for lists of ids of scripts that were not deleted. */
        200: {
          content: {
            "application/json": {
              errors?: {
                /** @description List of ids of scripts that you are unauthorized to delete. */
                unauthorizedIds?: string[];
                /** @description List of ids of scripts that were not found. */
                notFoundIds?: string[];
                /** @description List of ids of scripts that were not deleted due to other errors. */
                otherErrorIds?: string[];
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ScriptEntity: {
      /** @description The content of the script. */
      content?: string;
      /** @description The selected context. Unspecified context i.e. empty list means "None selected". */
      context?: string[];
      /**
       * Format: date-time
       * @description The script's created time.
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description The script creator's user id.
       */
      createdBy?: string;
      /**
       * Format: uuid
       * @description The id of the script.
       */
      id?: string;
      /**
       * Format: date-time
       * @description The script's modified time.
       */
      modifiedAt?: string;
      /**
       * Format: uuid
       * @description The script modifier's user id.
       */
      modifiedBy?: string;
      /** @description The name of the script. */
      name?: string;
    };
    ReturnedScriptEntity: components["schemas"]["ScriptEntity"];
    NewScriptEntity: {
      /** @description The content of the script. */
      content: string;
      /** @description The selected context. Unspecified context i.e. empty list means "None selected". */
      context?: string[];
      /** @description The name of the script. */
      name: string;
    };
    PartialScript: {
      /** @description The content of the script. */
      content?: string;
      /** @description The selected context. Unspecified context i.e. empty list means "None selected". */
      context?: string[];
      /** @description The name of the script. */
      name?: string;
    };
    /** @description Error returned by the backend server. */
    ErrorResponse: {
      /** @description An error message with the reason and/or instruction. */
      errorMessage: string;
    };
  };
  responses: {
    /** @description Not Found. */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
