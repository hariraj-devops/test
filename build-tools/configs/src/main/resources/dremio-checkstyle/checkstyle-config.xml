<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2017-2019 Dremio Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE module PUBLIC
  "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
  Checkstyle configuration for Dremio

  Checkstyle configuration is based on the sun_checks.xml file.

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at https://checkstyle.org
-->

<module name="Checker">

  <!-- Checks whether files end with a new line. -->
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf"/>
  </module>

  <!-- Maximum file line length -->
  <module name="FileLength">
    <property name="max" value="4000"/>
  </module>

  <!-- No TAB characters -->
  <module name="FileTabCharacter"/>

  <!-- No Windows newlines -->
  <module name="RegexpMultiline">
    <property name="id" value="windows_newlines"/>
    <property name="format" value="\r"/>
    <property name="message" value="No windows newlines"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="message" value="A line of code cannot contain any trailing whitespace"/>
  </module>

  <module name="SuppressWarningsFilter" />

  <module name="TreeWalker">
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE\:OFF ([\w\|]+)" />
      <property name="onCommentFormat" value="CHECKSTYLE\:ON ([\w\|*])" />
      <property name="checkFormat" value="$1"/>
    </module>

    <module name="IllegalImport">
      <!-- For "org.apache.commons.lang.*" classes use the corresponding class from "org.apache.commons.lang3.*" -->
      <!-- For "org.apache.commons.math.*" classes use the corresponding class from "org.apache.commons.math3.*" -->
      <!-- For "org.apache.commons.collections.*" classes use the corresponding class from "org.apache.commons.collections4.*" -->
      <property name="illegalPkgs" value="com.google.hive12,com.beust.jcommander.internal,jersey.repackaged,org.apache.commons.lang,org.apache.commons.math,org.apache.commons.collections,hive,oadd,org.kududb.client.shaded,org.jboss.netty,org.apache.curator.shaded,org.apache.htrace.fasterxml,twill"/>
    </module>

    <module name="AvoidStarImport">
      <property name="allowStaticMemberImports" value="true"/>
    </module>

    <!-- Checks for Javadoc comments. -->
    <!-- See https://checkstyle.org/checks/javadoc -->
    <module name="JavadocType">
      <property name="scope" value="public"/>
      <property name="allowMissingParamTags" value="true"/>
    </module>
    <module name="JavadocStyle">
      <property name="checkFirstSentence" value="false"/>
    </module>

    <!-- Checks for Naming Conventions. -->
    <!-- See https://checkstyle.org/checks/naming -->
    <module name="ConstantName">
      <!-- TODO: move to error -->
      <property name="severity" value="warning"/>
      <property name="format" value="^logger|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
    </module>
    <module name="IllegalIdentifierName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName">
      <!-- TODO: move to error -->
      <property name="severity" value="warning"/>
    </module>
    <module name="MemberName"/>
    <module name="MethodName">
      <property name="id" value="method_name_main"/>
      <!-- default pattern -->
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
    </module>
    <module name="MethodName">
      <property name="id" value="method_name_test"/>
      <!-- allow underscores if method starts with test -->
      <property name="format" value="^(test[a-zA-Z0-9_]*|[a-z][a-zA-Z0-9]*)$"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="id" value="prefer-StatelessRelShuttleImpl"/>
      <property name="format" value="extends\s+RelShuttleImpl"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Please do not extend RelShuttleImpl, instead extend StatelessRelShuttleImpl"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value=" Schema\.fromJSON"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Please use DremioArrowSchema.fromJSON instead of Schema.fromJSON"/>
    </module>

    <!-- Modifier Checks -->
    <!-- See https://checkstyle.org/checks/modifier -->
    <!-- module name="RedundantModifier"/ -->

    <!-- Checks for blocks. You know, those {}'s -->
    <!-- See https://checkstyle.org/checks/blocks -->
    <module name="EmptyBlock">
      <property name="option" value="text"/>
    </module>
    <module name="EmptyCatchBlock">
      <!-- TODO: move to error -->
      <property name="severity" value="warning"/>
    </module>
    <module name="NeedBraces"/>

    <!-- Checks for common coding problems -->
    <!-- See https://checkstyle.org/checks/coding -->
    <module name="EmptyStatement"/>
    <module name="EqualsAvoidNull"/>
    <module name="EqualsHashCode"/>
    <module name="FallThrough"/>
    <module name="HiddenField">
      <!-- TODO: move to error -->
      <property name="severity" value="warning"/>
      <property name="tokens" value="VARIABLE_DEF"/>
    </module>
    <module name="IllegalInstantiation"/>
    <module name="IllegalType">
      <property name="tokens" value="PARAMETER_DEF, METHOD_DEF, VARIABLE_DEF"/>
    </module>
    <module name="InnerAssignment"/>
    <module name="MissingSwitchDefault"/>
    <module name="MissingOverride"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>

    <!-- Checks for class design -->
    <!-- See https://checkstyle.org/checks/design -->
    <module name="MutableException"/>
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor">
      <!-- TODO: move to error -->
      <property name="severity" value="warning"/>
    </module>
    <module name="InterfaceIsType">
      <!-- TODO: move to error -->
      <property name="severity" value="warning"/>
    </module>
    <module name="VisibilityModifier">
      <property name="ignoreAnnotationCanonicalNames" value="org.junit.Rule" />
      <property name="ignoreAnnotationCanonicalNames" value="org.junit.ClassRule" />
      <property name="ignoreAnnotationCanonicalNames" value="org.junit.runners.Parameterized.Parameter" />
      <property name="ignoreAnnotationCanonicalNames" value="org.junit.jupiter.api.io.TempDir" />
      <property name="ignoreAnnotationCanonicalNames" value="com.google.common.annotations.VisibleForTesting" />
      <property name="ignoreAnnotationCanonicalNames" value="io.protostuff.Tag" />
      <property name="ignoreAnnotationCanonicalNames" value="org.projectnessie.versioned.persist.tests.extension.NessieDbAdapter" />
      <property name="allowPublicImmutableFields" value="true" />
    </module>

    <!-- Miscellaneous other checks. -->
    <!-- See https://checkstyle.org/checks/misc -->
    <module name="ArrayTypeStyle"/>
    <module name="UpperEll"/>

    <module name="SuppressWarningsHolder"/>
    <module name="OuterTypeFilename"/>
    <module name="PackageDeclaration"/>
  </module>

  <!-- Different MethodName rules for production and test code -->
  <module name="SuppressionSingleFilter">
    <property name="id" value="method_name_test"/>
    <property name="files" value="[\\/]src[\\/]main[\\/]"/>
  </module>
  <module name="SuppressionSingleFilter">
    <property name="id" value="method_name_main"/>
    <property name="files" value="[\\/]src[\\/]test[\\/]"/>
  </module>
  <!-- Disable certain checks in generated code -->
  <module name="SuppressionSingleFilter">
    <property name="checks" value="AvoidStarImport|NeedBraces"/>
    <property name="files" value="[\\/]generated-sources[\\/]"/>
  </module>
  <!-- Disable certain checks in test data -->
  <module name="SuppressionSingleFilter">
    <property name="checks" value="FileLength|FileTabCharacter|NewlineAtEndOfFile"/>
    <property name="files" value="[\\/]src[\\/]test[\\/]resources[\\/].+\.json$"/>
  </module>
  <!-- Disable all checks in resource files that are not part of <resourceIncludes> in the maven plugin config -->
  <!-- This allows equivalent usage of this checkstyle config outside of maven -->
  <!-- see https://checkstyle.org/filefilters -->
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value="[\\/]src[\\/](test|main)[\\/]resources[\\/].+\.(?!properties$|conf$|json$|xml$).+$"/>
  </module>

</module>
