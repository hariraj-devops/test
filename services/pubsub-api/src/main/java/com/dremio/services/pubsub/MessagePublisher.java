/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dremio.services.pubsub;

import com.dremio.common.util.Closeable;
import com.google.protobuf.Message;
import java.util.concurrent.CompletableFuture;

/**
 * Publishes messages for delivery to subscribers. The publisher guarantees that at future
 * completion, the messages have been persisted and will be attempted for delivery.
 */
public interface MessagePublisher<M extends Message> extends Closeable {
  /**
   * Publishes a message. The messages may be accumulated by the publisher and be sent in a batch,
   * this is implementation/configuration specific.
   *
   * @param message Message to publish.
   * @return Future with an opaque message id generated by the implementation. The id can be used to
   *     identify sent message. When the future is complete the respective message has been
   *     persisted. In general, the caller would wait for the future to be complete before declaring
   *     success.
   */
  CompletableFuture<String> publish(M message);

  MessagePublisher<? extends Message> NO_OP =
      new MessagePublisher<>() {
        @Override
        public CompletableFuture<String> publish(Message message) {
          return CompletableFuture.completedFuture(null);
        }

        @Override
        public void close() {}
      };
}
