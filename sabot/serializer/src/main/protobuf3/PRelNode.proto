/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax="proto3";
package plan;

import "PRelDataType.proto";
import "PRelTraitSet.proto";
import "PRexNode.proto";
import "PBatchSchema.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

option java_package = "com.dremio.plan.serialization";
option java_outer_classname = "PRelNodeTypes";

option optimize_for = SPEED;
option java_multiple_files = true;

message PRelNode {
  oneof derived_class {
    PLogicalValues logical_values = 1;
    PLogicalFilter logical_filter = 2;
    PLogicalProject logical_project = 3;
    PLogicalJoin logical_join = 4;
    PLogicalCorrelate logical_correlate = 5;
    PLogicalUnion logical_union = 6;
    PLogicalAggregate logical_aggregate = 7;
    PLogicalSort logical_sort = 8;
    PLogicalTableScan logical_table_scan = 9;
    PScanCrel scan_crel = 10;
    PCollect collect = 11;
    PUncollect uncollect = 12;
    PSample sample = 13;
    PLogicalMatch logical_match = 14;
    PLogicalIntersect logical_intersect = 15;
    PLogicalMinus logical_minus = 16;
    PLogicalTableFunctionScan logical_table_function_scan = 17;
    PLogicalWindow logical_window = 18;
  }
}

message PProps {
  PRelTraitSet trait_set = 1;
  double estimated_rows = 2;
  double cpu = 3;
  double memory = 4;
  double network = 5;
  double disk = 6;
}

message PScanCrel {
  PProps props = 1;
  dremio.schema.serialization.PBatchSchema schema = 2;
  repeated string path = 3;
  int64 split_count = 4;
  int64 record_count = 5;
  repeated string partition_fields = 6;
  string dataset_version = 7;
  string version_context = 8;
  repeated string column_names = 9;
}

message PExternalQueryScanCrel {
  PProps props = 1;
  dremio.schema.serialization.PBatchSchema schema = 2;
  string sql = 3;
  string plugin_name = 4;
}

message PExpansionNode {
  int32 input = 1;
  repeated string path = 2;
  bool context_sensitive = 3;
  bool isDefault = 4;
  string version_context = 5;
}

message PExpansionLeafNode {
  repeated string path = 1;
  PRelDataType row_type = 2;
  bool isDefault = 3;
  string version_context = 4;
}

message PDefaultExpansionNode {
  int32 input = 1;
  repeated string path = 2;
  bool context_sensitive = 3;
  string version_context = 4;
}

message PRelList {
  repeated google.protobuf.Any node = 1;
}


message PLogicalValues {
  message PLogicalValueTuple {
    repeated PRexNode literal = 2;
  }

  PProps props = 1;
  repeated PRelDataTypeField fields = 2;
  repeated PLogicalValueTuple tuples = 3;
}

message PLogicalFilter {
  PProps props = 1;
  int32 input = 2;
  PRexNode condition = 3;
}

message PLogicalProject {
  int32 input = 1;
  repeated string name = 2;
  repeated PRexNode expr = 3;
}

message PLogicalJoin {

  int32 left_input = 1;
  int32 right_input = 2;
  PJoinType join_type = 3;
  PRexNode condition = 4;
}

message PLogicalCorrelate {
  enum PSemiJoinType {
    INNER = 0;
    LEFT = 1;
    SEMI = 2;
    ANTI = 3;
  }

  int32 left_input = 1;
  int32 right_input = 2;
  PSemiJoinType semi_join_type = 3;
  PCorrelationId correlation_id = 4;
  PGroupSet required_columns = 5;
}

message PCorrelationId {
  int32 id = 1;
  PGroupSet column_index = 3;
}

message PLogicalUnion {
  repeated int32 input = 1;
  bool all = 2;
}

message PLogicalAggregate {
  int32 input = 1;
  repeated PAggregateCall aggregate_call = 2;
  bool indicator = 3;
  PGroupSet group_set = 4;
  repeated PGroupSet group_sets = 5;
}

message PLogicalSort {
  int32 input = 1;
  PRexNode offset = 2;
  PRexNode fetch = 3;
  repeated PRelFieldCollation collation = 4;
}

message PLogicalTableScan {
  repeated string path = 1;
}

message PAbstractRelNode {
  // RelOptCluster is not needed, since it doesn't store state.
  PRelTraitSet traitSet = 1;
}

message PSingleRel {
  PAbstractRelNode abstract_rel_node = 1;
  int32 input = 2;
}

message PCollect {
  PSingleRel single_rel = 1;
  string field_name = 2;
}

message PUncollect {
  PSingleRel single_rel = 1;
  bool with_ordinality = 2;
  repeated string item_aliases = 3;
}

message PSample {
  message PRelOptSampleParamters {
    bool isBernoulli = 1;
    float samplingPercentage = 2;
    bool isRepeatable = 3;
    int32 repeatableSeed = 4;
  }

  PSingleRel single_rel = 1;
  PRelOptSampleParamters params = 2;
}

message PLogicalMatch {
  message Strings {
    repeated string values = 1;
  }

  int32 input = 1;
  PRelDataType row_type = 2;
  PRexNode pattern = 3;
  bool strict_start = 4;
  bool strict_end = 5;
  map<string, PRexNode> pattern_definition = 6;
  map<string, PRexNode> measures = 7;
  PRexNode after = 8;
  map<string, Strings> subsets = 9;
  bool all_rows = 10;
  repeated PRexNode partition_keys = 11;
  PRelCollation order_keys = 12;
  PRexNode interval = 13;
}

message PLogicalIntersect {
  repeated int32 inputs = 1;
  bool all = 2;
}

message PLogicalMinus {
  repeated int32 inputs = 1;
  bool all = 2;
}

message PRelColumnMapping {
  int32 iOutputColumn = 1;
  int32 iInputRel = 2;
  int32 iInputColumn = 3;
  bool derived = 4;
}

message PLogicalTableFunctionScan {
  repeated int32 inputs = 1;
  PRexNode rexCall = 2;
  PRelDataType rowType = 3;
  repeated PRelColumnMapping columnMappings = 4;
}

message PFlattenCrel {
  int32 input = 1;
  repeated PRexNode toFlatten = 2;
  repeated string alias = 3;
  int32 numProjects = 4;
}

message PLogicalWindow {
  int32 input = 1;
  repeated PRexNode constants = 2;
  repeated PGroup groups = 3;
  PRelDataType type = 4;
}

message PGroup {
  repeated int32 keys = 1;
  bool isRows = 2;
  PRexWindowBound lowerBound = 3;
  PRexWindowBound upperBound = 4;
  PRelCollation orderKeys = 5;
  repeated PRexNode aggCalls = 6;
}
